import React, { useEffect, useState, useCallback } from 'react';
import { useTranslation } from 'react-i18next';
import { Link } from 'react-router-dom';
import { supabase } from '../lib/supabaseClient';
import { useAuth } from '../contexts/AuthContext';
import { FiDollarSign, FiArchive, FiRepeat, FiTrendingUp, FiTrendingDown, FiAlertCircle } from 'react-icons/fi';
import { formatCurrency, getAllCurrenciesForUser, getCurrencyDisplayInfo, HARDCODED_DEFAULT_CURRENCY } from '../utils/currencies'; 
import Button from '../components/common/Button';

const StatCard = ({ title, value, icon, color = 'text-nuzum-accent-primary', description, to }) => {
  const cardBaseClasses = "bg-nuzum-surface p-5 rounded-xl shadow-card flex flex-col sm:flex-row items-start sm:items-center space-y-3 sm:space-y-0 sm:space-s-4 h-full transition-all duration-200 ease-out";
  const hoverClasses = to ? 'hover:bg-nuzum-border hover:shadow-modal transform hover:-translate-y-1 cursor-pointer' : '';
  const cardContent = ( <div className={`${cardBaseClasses} ${hoverClasses}`}> <div className={`p-3 rounded-lg bg-nuzum-sidebar-bg ${color} self-start sm:mt-0`}> {React.cloneElement(icon, { className: "h-6 w-6" })} </div> <div className="flex-1"> <p className="text-sm text-nuzum-text-secondary font-medium">{title}</p> <p className="text-2xl font-semibold text-nuzum-text-primary whitespace-nowrap overflow-hidden text-ellipsis">{value}</p> {description && <p className="text-xs text-nuzum-text-secondary mt-1">{description}</p>} </div> </div> );
  if (to) { return <Link to={to} className="block h-full">{cardContent}</Link>; }
  return cardContent;
};

const DashboardPage = () => {
  const { t, i18n } = useTranslation('common');
  const { user, profile } = useAuth();
  const [stats, setStats] = useState({ totalAccountBalance: {}, totalMaterialsValue: {}, recentTransactionsCount: 0 });
  const [recentTransactions, setRecentTransactions] = useState([]);
  const [loading, setLoading] = useState(true);
  const [pageError, setPageError] = useState('');
  const [availableCurrencies, setAvailableCurrencies] = useState([]);
  const [loadingCurrencies, setLoadingCurrencies] = useState(true);

  useEffect(() => { let mounted = true; const loadCurrencies = async () => { setLoadingCurrencies(true); try { const fetchedCurrencies = await getAllCurrenciesForUser(user?.id || null); if (mounted) setAvailableCurrencies(fetchedCurrencies || []); } catch (err) { if (mounted) setAvailableCurrencies([]); } finally { if (mounted) setLoadingCurrencies(false); }}; loadCurrencies(); return () => { mounted = false; }; }, [user]);
  const fetchData = useCallback(async () => { if (!user || loadingCurrencies) { if (!user) setLoading(false); return; } setLoading(true); setPageError(''); try { const [accountsRes, materialsRes, transactionsRes] = await Promise.all([ supabase.from('accounts').select('balance, currency').eq('user_id', user.id), supabase.from('materials').select('price_per_unit, quantity, currency').eq('user_id', user.id), supabase.from('transactions').select('id, date, type, amount, currency, notes, accounts:account_id(name)').eq('user_id', user.id).order('date', { ascending: false }).limit(5) ]); if (accountsRes.error) throw accountsRes.error; if (materialsRes.error) throw materialsRes.error; if (transactionsRes.error) throw transactionsRes.error; let balByCur = {}; if (accountsRes.data) { accountsRes.data.forEach(a => { balByCur[a.currency] = (balByCur[a.currency] || 0) + parseFloat(a.balance); }); } let matValByCur = {}; if (materialsRes.data) { materialsRes.data.forEach(m => { const v = parseFloat(m.price_per_unit) * m.quantity; matValByCur[m.currency] = (matValByCur[m.currency] || 0) + v; }); } setStats({ totalAccountBalance: balByCur, totalMaterialsValue: matValByCur, recentTransactionsCount: transactionsRes.data?.length || 0 }); setRecentTransactions(transactionsRes.data || []); } catch (err) { setPageError(t('errorFetchingDashboard')); } finally { setLoading(false); }}, [user, t, loadingCurrencies]);
  useEffect(() => { if (!loadingCurrencies) fetchData(); }, [fetchData, loadingCurrencies]);
  useEffect(() => { if (!user || loadingCurrencies) return; const channelName = `public:dashboard_all_tables_v3_user_${user.id}`; const allChangesChannel = supabase.channel(channelName).on('postgres_changes', { event: '*', schema: 'public', table: 'accounts', filter: `user_id=eq.${user.id}` }, fetchData).on('postgres_changes', { event: '*', schema: 'public', table: 'materials', filter: `user_id=eq.${user.id}` }, fetchData).on('postgres_changes', { event: '*', schema: 'public', table: 'transactions', filter: `user_id=eq.${user.id}` }, fetchData).subscribe(); return () => { supabase.removeChannel(allChangesChannel); };}, [user, fetchData, loadingCurrencies]);

  if ((loading || loadingCurrencies) && !pageError) { return <div className="flex justify-center items-center h-[calc(100vh-250px)]"><svg className="animate-spin h-12 w-12 text-nuzum-accent-primary" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle><path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg></div>; }
  if (pageError) { return <div className="text-center p-10 bg-nuzum-surface rounded-xl shadow-card"><FiAlertCircle className="mx-auto h-12 w-12 text-nuzum-danger mb-4" /><p className="text-nuzum-danger">{pageError}</p><Button onClick={fetchData} className="mt-6" variant="accent">{t('retry')}</Button></div>; }
  const userName = profile?.full_name || profile?.username || user?.email || t('guest');

  return ( <div className="space-y-8"> <div className="bg-nuzum-surface p-6 rounded-xl shadow-card"><h1 className="text-3xl sm:text-4xl font-bold text-nuzum-text-primary mb-2">{t('welcomeMessage', { name: userName })}</h1><p className="text-base text-nuzum-text-secondary">{t('dashboardOverviewSubtitle')}</p></div> <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">{Object.keys(stats.totalAccountBalance).length > 0 ? ( Object.entries(stats.totalAccountBalance).map(([currencyCode, balance]) => ( <StatCard key={`balance-${currencyCode}`} title={`${t('totalBalance')} (${getCurrencyDisplayInfo(currencyCode, availableCurrencies, t).name})`} value={formatCurrency(balance, currencyCode, t, availableCurrencies, i18n.language === 'ar' ? 'ar-EG-u-nu-latn' : undefined)} icon={<FiDollarSign />} color="text-nuzum-accent-primary" to="/accounts"/> )) ) : ( <StatCard title={t('totalBalance')} value={formatCurrency(0, HARDCODED_DEFAULT_CURRENCY.code, t, availableCurrencies, i18n.language === 'ar' ? 'ar-EG-u-nu-latn' : undefined)} icon={<FiDollarSign />} color="text-nuzum-accent-primary" description={t('noAccountsYet')} to="/accounts"/> )}{Object.keys(stats.totalMaterialsValue).length > 0 ? ( Object.entries(stats.totalMaterialsValue).map(([currencyCode, value]) => ( <StatCard key={`materials-${currencyCode}`} title={`${t('totalInventoryValue')} (${getCurrencyDisplayInfo(currencyCode, availableCurrencies, t).name})`} value={formatCurrency(value, currencyCode, t, availableCurrencies, i18n.language === 'ar' ? 'ar-EG-u-nu-latn' : undefined)} icon={<FiArchive />} color="text-nuzum-success" to="/materials"/> )) ) : ( <StatCard title={t('totalInventoryValue')} value={formatCurrency(0, HARDCODED_DEFAULT_CURRENCY.code, t, availableCurrencies, i18n.language === 'ar' ? 'ar-EG-u-nu-latn' : undefined)} icon={<FiArchive />} color="text-nuzum-success" description={t('noMaterialsYet')} to="/materials"/> )}<StatCard title={t('recentTransactionsCount')} value={stats.recentTransactionsCount} icon={<FiRepeat />} color="text-nuzum-warning" description={t('last5Transactions')} to="/transactions"/></div> <div className="bg-nuzum-surface p-6 rounded-xl shadow-card"><div className="flex justify-between items-center mb-5"><h2 className="text-xl font-semibold text-nuzum-text-primary">{t('recentTransactions')}</h2><Link to="/transactions" className="text-sm font-medium text-nuzum-accent-primary hover:text-nuzum-accent-primary-hover hover:underline">{t('viewAll')} {t('transactions')}</Link></div>{recentTransactions.length > 0 ? ( <ul className="divide-y divide-nuzum-border"> {recentTransactions.map(tx => ( <li key={tx.id} className="py-4 flex justify-between items-center"> <div className="flex-1 min-w-0"> <p className={`font-medium truncate ${tx.type === 'income' ? 'text-nuzum-success' : 'text-nuzum-danger'}`}>{tx.type === 'income' ? <FiTrendingUp className="inline me-2 align-middle h-5 w-5"/> : <FiTrendingDown className="inline me-2 align-middle h-5 w-5"/>}{tx.notes || (tx.accounts ? `${t(tx.type)} - ${tx.accounts.name}` : t(tx.type))}</p> <p className="text-xs text-nuzum-text-secondary mt-1">{new Date(tx.date).toLocaleDateString(i18n.language === 'ar' ? 'ar-EG-u-nu-latn' : undefined, { year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' })} {' - '} <span className="font-mono text-xs">{tx.accounts?.name || t('unknownAccount')}</span></p> </div> <p className={`font-semibold text-lg ${tx.type === 'income' ? 'text-nuzum-success' : 'text-nuzum-danger'} ps-2 text-right`}>{formatCurrency(tx.amount, tx.currency, t, availableCurrencies, i18n.language === 'ar' ? 'ar-EG-u-nu-latn' : undefined)}</p> </li> ))} </ul> ) : ( <p className="text-nuzum-text-secondary py-4 text-center">{t('noRecentTransactions')}</p> )}</div></div>
  );
};

export default DashboardPage;
